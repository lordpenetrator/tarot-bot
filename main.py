import telebot # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–æ—Ç—É
import json
import random
import time
import os
import threading # —á—Ç–æ–±—ã —Ä–∞—Å–ø–∞—Ä–∞–ª–ª–µ–ª–∏–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—Å—ã
from telebot import apihelper
from pathlib import Path
from telebot import types
from limiter import TarotLimiter
from anti_ddos import SimpleAntiDDoS
from setup import config
limiter = TarotLimiter()



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞. 
bot = telebot.TeleBot(config.BOT_TOKEN)
anti_ddos = SimpleAntiDDoS(bot)
'''#def console_listener(limiter):
    #–û–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
    while True:
        cmd = input().strip().lower()
        
        if cmd == "stats":
            print(f"–í—Å–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ —Å–¥–µ–ª–∞–Ω–æ: {limiter.get_readings_count()}")
        elif cmd == "clear base":
            if limiter.clear():
                print("‚úì –ë–∞–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞")
            else:
                print("√ó –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã")
        elif cmd == "help":
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                  "stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                  "clear base - –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
                  "unban all - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö\n"
                  "unban <user_id> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                  "list banned - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö")
        else:
            response = config.handle_admin_command(cmd)
            if response:
                print(response)
                '''

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç –¢–∞—Ä–æ
try:
    with open('tarot_cards.json', 'r', encoding='utf-8') as file:
        tarot_cards = list(json.load(file).values())  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è –≤ —Å–ø–∏—Å–æ–∫
except FileNotFoundError:
    tarot_cards = []
    print("–û—à–∏–±–∫–∞: –§–∞–π–ª tarot_cards.json –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
tarot_images = Path(__file__).parent / "tarot_images"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def show_main_menu(chat_id, full_greeting=False):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "–ú–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞", 
        "–†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ –Ω–∞ –Ω–µ–¥–µ–ª—é",
        "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
        "–ù–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª"
    ]
    markup.add(*[types.KeyboardButton(btn) for btn in buttons])
    
    if full_greeting:
        user = user_data.get(chat_id, {})
        name = user.get('name', '–¥—Ä—É–≥')
        text = (
            f"–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n"
            "–Ø - –±–æ—Ç-–ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å. –Ø –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥ —Ç–∞—Ä–æ –Ω–∞ –Ω–µ–¥–µ–ª—é –ø–æ –≤–∞—à–µ–º—É –∑–Ω–∞–∫—É –∑–æ–¥–∏–∞–∫–∞.\n"
            "–í–∞–∂–Ω–æ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ: —Ü–µ–ª—å –º–æ–µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—É–≥—É–±–æ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è.\n"
            "–ï—Å–ª–∏ –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –º–µ–Ω—è –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, "
            "–∏ —è —Å–º–æ–≥—É —Ä–∞–¥–æ–≤–∞—Ç—å –≤–∞—Å –±–æ–ª—å—à–µ :)\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
    else:
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    bot.send_message(chat_id, text, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
@anti_ddos
def handle_start(message):
    user_data[message.chat.id] = {'name': message.from_user.first_name}
    show_main_menu(message.chat.id, full_greeting=True)

@bot.message_handler(func=lambda m: m.text == "–ù–∞–∑–∞–¥")
def handle_back(message):
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda m: m.text == "–ú–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞")
@anti_ddos
def ask_zodiac(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    zodiacs = [
        "‚ôà –û–≤–µ–Ω", "‚ôâ –¢–µ–ª–µ—Ü", "‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã",
        "‚ôã –†–∞–∫", "‚ôå –õ–µ–≤", "‚ôç –î–µ–≤–∞",
        "‚ôé –í–µ—Å—ã", "‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω", "‚ôê –°—Ç—Ä–µ–ª–µ—Ü",
        "‚ôë –ö–æ–∑–µ—Ä–æ–≥", "‚ôí –í–æ–¥–æ–ª–µ–π", "‚ôì –†—ã–±—ã"
    ]
    
    for i in range(0, len(zodiacs), 3):
        markup.add(*[types.KeyboardButton(z) for z in zodiacs[i:i+3]])
    
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=markup)

@bot.message_handler(func=lambda m: any(m.text.startswith(s) for s in ["‚ôà", "‚ôâ", "‚ôä", "‚ôã", "‚ôå", "‚ôç", "‚ôé", "‚ôè", "‚ôê", "‚ôë", "‚ôí", "‚ôì"]))
def save_zodiac(message):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if message.chat.id not in user_data:
        user_data[message.chat.id] = {'name': message.from_user.first_name}
    
    try:
        zodiac = message.text.split(maxsplit=1)[1]
        user_data[message.chat.id]['zodiac'] = zodiac
        bot.send_message(message.chat.id, f"–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: {zodiac}")
        show_main_menu(message.chat.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")

@bot.message_handler(func=lambda m: m.text == "–†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ –Ω–∞ –Ω–µ–¥–µ–ª—é")
@anti_ddos
def make_tarot_reading(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–≤—è–∑—å —Å –∫–æ—Å–º–æ—Å–æ–º...")
    time.sleep(3)
    bot.send_message(chat_id, "–û—Ç–∫—Ä—ã–≤–∞—é –∫–∞–Ω–∞–ª –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏...")
    time.sleep(3)
    bot.send_message(chat_id, "–ü—Ä–∏–Ω–∏–º–∞—é –ø–æ—Å–ª–∞–Ω–∏—è –∑–≤—ë–∑–¥ –∏ –ø–ª–∞–Ω–µ—Ç...")
    time.sleep(3)
     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    allowed, _ = limiter.check_limit(chat_id)
    if not allowed:
        limiter.send_warning(bot, chat_id)
        return
    
    if 'zodiac' not in user_data.get(chat_id, {}):
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞!")
        return ask_zodiac(message)
    
    if not tarot_cards:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return
    '''
    –°–∞–º–∞—è –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞. –ò–∑ –ø–∞–ø–∫–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –¥–æ —ç—Ç–æ–≥–æ –º—ã –≤–∑—è–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤,
    –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª–∏ –∏—Ö –≤ —Å–ø–∏—Å–æ–∫, –≤–∑—è–ª–∏ 3 —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö, –¥–∞–ª–µ–µ –≤ —Ü–∏–∫–ª–µ –∫ –∫–∞–∂–¥–æ–π —Å–ª—É—á–∞–π–Ω–æ –æ—Ç–æ–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–µ —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –µ—ë –ø–æ–ª–æ–∂–µ–Ω–∏–µ, –¥–∞–ª–µ–µ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è —Ç—Ä–∞–∫—Ç–æ–≤–∞–Ω–∏–µ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞.
     –≠—Ç–æ –≤—Å—ë –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ü–∏–∫–ª–µ –∏–∑ —Ç—Ä–µ—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –Ω–∞—á–∞–ª–∞, —Å–µ—Ä–µ–¥–∏–Ω—ã –∏ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏.
    '''
    try:
        selected_cards = random.sample(tarot_cards, 3)  # –¢–µ–ø–µ—Ä—å tarot_cards - —Å–ø–∏—Å–æ–∫
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞")
        return
    
    periods = ["–ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏", "–°–µ—Ä–µ–¥–∏–Ω–∞ –Ω–µ–¥–µ–ª–∏", "–ö–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏"]
    
    for i, card in enumerate(selected_cards):
        position = random.choice(['upright', 'reversed'])
        card_text = f"‚ú® {periods[i]}: {card[position]}"
        
        image_path = tarot_images / f"{card['id']}.jpg"
        if image_path.exists():
            with open(image_path, 'rb') as photo:
                bot.send_photo(chat_id, photo, caption=card_text)
        else:
            bot.send_message(chat_id, card_text)
        
        if i < 2:
            time.sleep(3)

    limiter.record_reading(chat_id)
    
    time.sleep(3)
    show_main_menu(chat_id)

@bot.message_handler(func=lambda m: m.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
@anti_ddos
def handle_question(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º", url="https://t.me/DarthPenetrator"))
    bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—Å–∞–≤ –º–Ω–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã")
@anti_ddos
def handle_reviews(message): # –ø–æ—á–µ–º—É —Ç–æ —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤—ã—Å–≤–µ—á–∏–≤–∞–µ—Ç—Å—è
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("—Ç—ã–∫", url="https://t.me/client_reviews_chat"))
    bot.send_message(message.chat.id, "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–∑—ã–≤—ã –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–º —è —É–∂–µ —É—Å–ø–µ–ª —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –∑–∞ 3 –≥–æ–¥–∞ :):", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "–ù–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª")
@anti_ddos
def handle_channel(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/best_in_the_world_gadalka_group"))
    bot.send_message(message.chat.id, "–ú–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –≤—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ:", reply_markup=markup)


def polling_with_retry():
    """–§—É–Ω–∫—Ü–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º polling –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    retry_delay = 5  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    while True:
        try:
            print("–ó–∞–ø—É—Å–∫ polling...")
            bot.polling(
                none_stop=True,
                timeout=30,
                long_polling_timeout=25,
                allowed_updates=["message", "callback_query"]
            )
        except telebot.apihelper.ApiTelegramException as e:
            if e.error_code == 429:  # Too Many Requests
                retry_after = int(e.result.headers.get('Retry-After', 10))
                print(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {retry_after} —Å–µ–∫.")
                time.sleep(retry_after)
                retry_delay = min(retry_delay * 1.5, 60)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            else:
                print(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
                time.sleep(retry_delay)
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ polling: {e}")
            time.sleep(retry_delay)
        finally:
            bot.stop_polling()  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞

if __name__ == '__main__':
    try:
        config.run_health_checks()
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ö–æ–º–∞–Ω–¥—ã:\nstats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\nclear base - –æ—á–∏—Å—Ç–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\nhelp - –ø–æ–º–æ—â—å\nexit - –≤—ã—Ö–æ–¥")
        
        # –ó–∞–ø—É—Å–∫ polling —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        polling_thread = threading.Thread(target=polling_with_retry, daemon=True)
        polling_thread.start()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        while True:
            try:
                cmd = input().strip().lower()
                
                if cmd == "stats":
                    print(f"–í—Å–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤: {limiter.get_readings_count()}")
                elif cmd == "clear base":
                    limiter.clear()
                    print("‚úì –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞")
                elif cmd == "help":
                    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                          "stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                          "clear base - –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã\n"
                          "exit - –≤—ã—Ö–æ–¥")
                elif cmd == "exit":
                    break
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
                
    except KeyboardInterrupt:
        print("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    finally:
        print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        bot.stop_polling()
        print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
